<application>
  <component name="EasyCodeSetting">
    <option name="currTemplateGroupName" value="springboot+graphqls" />
    <option name="templateGroupMap">
      <map>
        <entry key="Default">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;&#10;##使用宏定义设置回调（保存位置与文件后缀）&#10;#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;entity&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import java.io.Serializable;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;实体类&quot;)&#10;public class $!{tableInfo.name} implements Serializable {&#10;    private static final long serialVersionUID = $!tool.serial();&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(${column.comment})/**&#10;    * ${column.comment}&#10;    */#end&#10;&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;##使用宏定义实现get,set方法&#10;#getSetMethod($column)&#10;#end&#10;&#10;}" />
                    <option name="name" value="entity.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Dao&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dao&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dao;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import org.apache.ibatis.annotations.Param;&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表数据库访问层&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;public interface $!{tableName} {&#10;&#10;    /**&#10;     * 通过ID查询单条数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 实例对象&#10;     */&#10;    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 查询指定行数据&#10;     *&#10;     * @param offset 查询起始位置&#10;     * @param limit 查询条数&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; queryAllByLimit(@Param(&quot;offset&quot;) int offset, @Param(&quot;limit&quot;) int limit);&#10;&#10;&#10;    /**&#10;     * 通过实体作为筛选条件查询&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; queryAll($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 影响行数&#10;     */&#10;    int insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 影响行数&#10;     */&#10;    int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 通过主键删除数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 影响行数&#10;     */&#10;    int deleteById($!pk.shortType $!pk.name);&#10;&#10;}" />
                    <option name="name" value="dao.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表服务接口&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;public interface $!{tableName} {&#10;&#10;    /**&#10;     * 通过ID查询单条数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 实例对象&#10;     */&#10;    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 查询多条数据&#10;     *&#10;     * @param offset 查询起始位置&#10;     * @param limit 查询条数&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; queryAllByLimit(int offset, int limit);&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    $!{tableInfo.name} insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 通过主键删除数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 是否成功&#10;     */&#10;    boolean deleteById($!pk.shortType $!pk.name);&#10;&#10;}" />
                    <option name="name" value="service.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ServiceImpl&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service/impl&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.stereotype.Service;&#10;&#10;import javax.annotation.Resource;&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表服务实现类&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;@Service(&quot;$!tool.firstLowerCase($!{tableInfo.name})Service&quot;)&#10;public class $!{tableName} implements $!{tableInfo.name}Service {&#10;    @Resource&#10;    private $!{tableInfo.name}Dao $!tool.firstLowerCase($!{tableInfo.name})Dao;&#10;&#10;    /**&#10;     * 通过ID查询单条数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 实例对象&#10;     */&#10;    @Override&#10;    public $!{tableInfo.name} queryById($!pk.shortType $!pk.name) {&#10;        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.queryById($!pk.name);&#10;    }&#10;&#10;    /**&#10;     * 查询多条数据&#10;     *&#10;     * @param offset 查询起始位置&#10;     * @param limit 查询条数&#10;     * @return 对象列表&#10;     */&#10;    @Override&#10;    public List&lt;$!{tableInfo.name}&gt; queryAllByLimit(int offset, int limit) {&#10;        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.queryAllByLimit(offset, limit);&#10;    }&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    @Override&#10;    public $!{tableInfo.name} insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.insert($!tool.firstLowerCase($!{tableInfo.name}));&#10;        return $!tool.firstLowerCase($!{tableInfo.name});&#10;    }&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    @Override&#10;    public $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.update($!tool.firstLowerCase($!{tableInfo.name}));&#10;        return this.queryById($!{tool.firstLowerCase($!{tableInfo.name})}.get$!tool.firstUpperCase($pk.name)());&#10;    }&#10;&#10;    /**&#10;     * 通过主键删除数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 是否成功&#10;     */&#10;    @Override&#10;    public boolean deleteById($!pk.shortType $!pk.name) {&#10;        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.deleteById($!pk.name) &gt; 0;&#10;    }&#10;}" />
                    <option name="name" value="serviceImpl.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import javax.annotation.Resource;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表控制层&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;@RestController&#10;@RequestMapping(&quot;$!tool.firstLowerCase($tableInfo.name)&quot;)&#10;public class $!{tableName} {&#10;    /**&#10;     * 服务对象&#10;     */&#10;    @Resource&#10;    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;&#10;&#10;    /**&#10;     * 通过主键查询单条数据&#10;     *&#10;     * @param id 主键&#10;     * @return 单条数据&#10;     */&#10;    @GetMapping(&quot;selectOne&quot;)&#10;    public $!{tableInfo.name} selectOne($!pk.shortType id) {&#10;        return this.$!{tool.firstLowerCase($tableInfo.name)}Service.queryById(id);&#10;    }&#10;&#10;}" />
                    <option name="name" value="controller.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入mybatis支持&#10;$!mybatisSupport&#10;&#10;##设置保存名称与保存位置&#10;$!callback.setFileName($tool.append($!{tableInfo.name}, &quot;Dao.xml&quot;))&#10;$!callback.setSavePath($tool.append($modulePath, &quot;/src/main/resources/mapper&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&#10;&lt;mapper namespace=&quot;$!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao&quot;&gt;&#10;&#10;    &lt;resultMap type=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot; id=&quot;$!{tableInfo.name}Map&quot;&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;        &lt;result property=&quot;$!column.name&quot; column=&quot;$!column.obj.name&quot; jdbcType=&quot;$!column.ext.jdbcType&quot;/&gt;&#10;#end&#10;    &lt;/resultMap&gt;&#10;&#10;    &lt;!--查询单个--&gt;&#10;    &lt;select id=&quot;queryById&quot; resultMap=&quot;$!{tableInfo.name}Map&quot;&gt;&#10;        select&#10;          #allSqlColumn()&#10;&#10;        from $!{tableInfo.obj.parent.name}.$!tableInfo.obj.name&#10;        where $!pk.obj.name = #{$!pk.name}&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--查询指定行数据--&gt;&#10;    &lt;select id=&quot;queryAllByLimit&quot; resultMap=&quot;$!{tableInfo.name}Map&quot;&gt;&#10;        select&#10;          #allSqlColumn()&#10;&#10;        from $!{tableInfo.obj.parent.name}.$!tableInfo.obj.name&#10;        limit #{offset}, #{limit}&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--通过实体作为筛选条件查询--&gt;&#10;    &lt;select id=&quot;queryAll&quot; resultMap=&quot;$!{tableInfo.name}Map&quot;&gt;&#10;        select&#10;          #allSqlColumn()&#10;&#10;        from $!{tableInfo.obj.parent.name}.$!tableInfo.obj.name&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;            &lt;if test=&quot;$!column.name != null#if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end&quot;&gt;&#10;                and $!column.obj.name = #{$!column.name}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--新增所有列--&gt;&#10;    &lt;insert id=&quot;insert&quot; keyProperty=&quot;$!pk.name&quot; useGeneratedKeys=&quot;true&quot;&gt;&#10;        insert into $!{tableInfo.obj.parent.name}.$!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)&#10;        values (#foreach($column in $tableInfo.otherColumn)#{$!{column.name}}#if($velocityHasNext), #end#end)&#10;    &lt;/insert&gt;&#10;&#10;    &lt;!--通过主键修改数据--&gt;&#10;    &lt;update id=&quot;update&quot;&gt;&#10;        update $!{tableInfo.obj.parent.name}.$!{tableInfo.obj.name}&#10;        &lt;set&gt;&#10;#foreach($column in $tableInfo.otherColumn)&#10;            &lt;if test=&quot;$!column.name != null#if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end&quot;&gt;&#10;                $!column.obj.name = #{$!column.name},&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/set&gt;&#10;        where $!pk.obj.name = #{$!pk.name}&#10;    &lt;/update&gt;&#10;&#10;    &lt;!--通过主键删除--&gt;&#10;    &lt;delete id=&quot;deleteById&quot;&gt;&#10;        delete from $!{tableInfo.obj.parent.name}.$!{tableInfo.obj.name} where $!pk.obj.name = #{$!pk.name}&#10;    &lt;/delete&gt;&#10;&#10;&lt;/mapper&gt;" />
                    <option name="name" value="mapper.xml" />
                  </Template>
                  <Template>
                    <option name="code" value="//调试表原始对象&#10;$!tool.debug($tableInfo.obj)&#10;&#10;//调试列原始对象&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj)&#10;&#10;//调试列原始列类型&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj.dataType)&#10;&#10;//获取原始列类型中的字段&#10;sqlType = $!tool.getField($tableInfo.fullColumn.get(0).obj.dataType, &quot;typeName&quot;)&#10;&#10;//执行原始列类型中的方法&#10;sqlTypeLen = $!tableInfo.fullColumn.get(0).obj.dataType.getLength()&#10;" />
                    <option name="name" value="debug.json" />
                  </Template>
                </list>
              </option>
              <option name="name" value="Default" />
            </TemplateGroup>
          </value>
        </entry>
        <entry key="JPA+GraphQL">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;&#10;##使用宏定义设置回调（保存位置与文件后缀）&#10;#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;entity&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import java.io.Serializable;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;实体类&quot;)&#10;public class $!{tableInfo.name} implements Serializable {&#10;    private static final long serialVersionUID = $!tool.serial();&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(${column.comment})/**&#10;    * ${column.comment}&#10;    */#end&#10;&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;##使用宏定义实现get,set方法&#10;#getSetMethod($column)&#10;#end&#10;&#10;}" />
                    <option name="name" value="entity.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Dao&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dao&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dao;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import org.apache.ibatis.annotations.Param;&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表数据库访问层&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;public interface $!{tableName} {&#10;&#10;    /**&#10;     * 通过ID查询单条数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 实例对象&#10;     */&#10;    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 查询指定行数据&#10;     *&#10;     * @param offset 查询起始位置&#10;     * @param limit 查询条数&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; queryAllByLimit(@Param(&quot;offset&quot;) int offset, @Param(&quot;limit&quot;) int limit);&#10;&#10;&#10;    /**&#10;     * 通过实体作为筛选条件查询&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; queryAll($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 影响行数&#10;     */&#10;    int insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 影响行数&#10;     */&#10;    int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 通过主键删除数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 影响行数&#10;     */&#10;    int deleteById($!pk.shortType $!pk.name);&#10;&#10;}" />
                    <option name="name" value="dao.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表服务接口&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;public interface $!{tableName} {&#10;&#10;    /**&#10;     * 通过ID查询单条数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 实例对象&#10;     */&#10;    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 查询多条数据&#10;     *&#10;     * @param offset 查询起始位置&#10;     * @param limit 查询条数&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; queryAllByLimit(int offset, int limit);&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    $!{tableInfo.name} insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 通过主键删除数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 是否成功&#10;     */&#10;    boolean deleteById($!pk.shortType $!pk.name);&#10;&#10;}" />
                    <option name="name" value="service.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ServiceImpl&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service/impl&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.stereotype.Service;&#10;&#10;import javax.annotation.Resource;&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表服务实现类&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;@Service(&quot;$!tool.firstLowerCase($!{tableInfo.name})Service&quot;)&#10;public class $!{tableName} implements $!{tableInfo.name}Service {&#10;    @Resource&#10;    private $!{tableInfo.name}Dao $!tool.firstLowerCase($!{tableInfo.name})Dao;&#10;&#10;    /**&#10;     * 通过ID查询单条数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 实例对象&#10;     */&#10;    @Override&#10;    public $!{tableInfo.name} queryById($!pk.shortType $!pk.name) {&#10;        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.queryById($!pk.name);&#10;    }&#10;&#10;    /**&#10;     * 查询多条数据&#10;     *&#10;     * @param offset 查询起始位置&#10;     * @param limit 查询条数&#10;     * @return 对象列表&#10;     */&#10;    @Override&#10;    public List&lt;$!{tableInfo.name}&gt; queryAllByLimit(int offset, int limit) {&#10;        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.queryAllByLimit(offset, limit);&#10;    }&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    @Override&#10;    public $!{tableInfo.name} insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.insert($!tool.firstLowerCase($!{tableInfo.name}));&#10;        return $!tool.firstLowerCase($!{tableInfo.name});&#10;    }&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    @Override&#10;    public $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.update($!tool.firstLowerCase($!{tableInfo.name}));&#10;        return this.queryById($!{tool.firstLowerCase($!{tableInfo.name})}.get$!tool.firstUpperCase($pk.name)());&#10;    }&#10;&#10;    /**&#10;     * 通过主键删除数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 是否成功&#10;     */&#10;    @Override&#10;    public boolean deleteById($!pk.shortType $!pk.name) {&#10;        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.deleteById($!pk.name) &gt; 0;&#10;    }&#10;}" />
                    <option name="name" value="serviceImpl.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import javax.annotation.Resource;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表控制层&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;@RestController&#10;@RequestMapping(&quot;$!tool.firstLowerCase($tableInfo.name)&quot;)&#10;public class $!{tableName} {&#10;    /**&#10;     * 服务对象&#10;     */&#10;    @Resource&#10;    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;&#10;&#10;    /**&#10;     * 通过主键查询单条数据&#10;     *&#10;     * @param id 主键&#10;     * @return 单条数据&#10;     */&#10;    @GetMapping(&quot;selectOne&quot;)&#10;    public $!{tableInfo.name} selectOne($!pk.shortType id) {&#10;        return this.$!{tool.firstLowerCase($tableInfo.name)}Service.queryById(id);&#10;    }&#10;&#10;}" />
                    <option name="name" value="controller.java" />
                  </Template>
                  <Template>
                    <option name="code" value="//调试表原始对象&#10;$!tool.debug($tableInfo.obj)&#10;&#10;//调试列原始对象&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj)&#10;&#10;//调试列原始列类型&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj.dataType)&#10;&#10;//获取原始列类型中的字段&#10;sqlType = $!tool.getField($tableInfo.fullColumn.get(0).obj.dataType, &quot;typeName&quot;)&#10;&#10;//执行原始列类型中的方法&#10;sqlTypeLen = $!tableInfo.fullColumn.get(0).obj.dataType.getLength()&#10;" />
                    <option name="name" value="debug.json" />
                  </Template>
                </list>
              </option>
              <option name="name" value="JPA+GraphQL" />
            </TemplateGroup>
          </value>
        </entry>
        <entry key="MybatisPlus">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;entity&quot;)&#10;&#10;##自动导入包（全局变量）&#10;$!autoImport&#10;import com.baomidou.mybatisplus.extension.activerecord.Model;&#10;import java.io.Serializable;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;表实体类&quot;)&#10;@SuppressWarnings(&quot;serial&quot;)&#10;public class $!{tableInfo.name} extends Model&lt;$!{tableInfo.name}&gt; {&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(${column.comment})//${column.comment}#end&#10;&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#getSetMethod($column)&#10;#end&#10;&#10;#foreach($column in $tableInfo.pkColumn)&#10;    /**&#10;     * 获取主键值&#10;     *&#10;     * @return 主键值&#10;     */&#10;    @Override&#10;    protected Serializable pkVal() {&#10;        return this.$!column.name;&#10;    }&#10;    #break&#10;#end&#10;}" />
                    <option name="name" value="entity" />
                  </Template>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##设置表后缀（宏定义）&#10;#setTableSuffix(&quot;Dao&quot;)&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/dao&quot;, &quot;Dao.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;dao&quot;)&#10;&#10;import com.baomidou.mybatisplus.core.mapper.BaseMapper;&#10;import $!{tableInfo.savePackageName}.entity.$!tableInfo.name;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;表数据库访问层&quot;)&#10;public interface $!{tableName} extends BaseMapper&lt;$!tableInfo.name&gt; {&#10;&#10;}" />
                    <option name="name" value="dao" />
                  </Template>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##设置表后缀（宏定义）&#10;#setTableSuffix(&quot;Service&quot;)&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/service&quot;, &quot;Service.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;service&quot;)&#10;&#10;import com.baomidou.mybatisplus.extension.service.IService;&#10;import $!{tableInfo.savePackageName}.entity.$!tableInfo.name;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;表服务接口&quot;)&#10;public interface $!{tableName} extends IService&lt;$!tableInfo.name&gt; {&#10;&#10;}" />
                    <option name="name" value="service" />
                  </Template>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##设置表后缀（宏定义）&#10;#setTableSuffix(&quot;ServiceImpl&quot;)&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/service/impl&quot;, &quot;ServiceImpl.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;service.impl&quot;)&#10;&#10;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;&#10;import $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.stereotype.Service;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;表服务实现类&quot;)&#10;@Service(&quot;$!tool.firstLowerCase($tableInfo.name)Service&quot;)&#10;public class $!{tableName} extends ServiceImpl&lt;$!{tableInfo.name}Dao, $!{tableInfo.name}&gt; implements $!{tableInfo.name}Service {&#10;&#10;}" />
                    <option name="name" value="serviceImpl" />
                  </Template>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##设置表后缀（宏定义）&#10;#setTableSuffix(&quot;Controller&quot;)&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/controller&quot;, &quot;Controller.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;controller&quot;)&#10;&#10;##定义服务名&#10;#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), &quot;Service&quot;))&#10;&#10;##定义实体对象名&#10;#set($entityName = $!tool.firstLowerCase($!tableInfo.name))&#10;&#10;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;&#10;import com.baomidou.mybatisplus.extension.api.ApiController;&#10;import com.baomidou.mybatisplus.extension.api.R;&#10;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;&#10;import $!{tableInfo.savePackageName}.entity.$!tableInfo.name;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import javax.annotation.Resource;&#10;import java.io.Serializable;&#10;import java.util.List;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;表控制层&quot;)&#10;@RestController&#10;@RequestMapping(&quot;$!tool.firstLowerCase($!tableInfo.name)&quot;)&#10;public class $!{tableName} extends ApiController {&#10;    /**&#10;     * 服务对象&#10;     */&#10;    @Resource&#10;    private $!{tableInfo.name}Service $!{serviceName};&#10;&#10;    /**&#10;     * 分页查询所有数据&#10;     *&#10;     * @param page 分页对象&#10;     * @param $!entityName 查询实体&#10;     * @return 所有数据&#10;     */&#10;    @GetMapping&#10;    public R selectAll(Page&lt;$!tableInfo.name&gt; page, $!tableInfo.name $!entityName) {&#10;        return success(this.$!{serviceName}.page(page, new QueryWrapper&lt;&gt;($!entityName)));&#10;    }&#10;&#10;    /**&#10;     * 通过主键查询单条数据&#10;     *&#10;     * @param id 主键&#10;     * @return 单条数据&#10;     */&#10;    @GetMapping(&quot;{id}&quot;)&#10;    public R selectOne(@PathVariable Serializable id) {&#10;        return success(this.$!{serviceName}.getById(id));&#10;    }&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param $!entityName 实体对象&#10;     * @return 新增结果&#10;     */&#10;    @PostMapping&#10;    public R insert(@RequestBody $!tableInfo.name $!entityName) {&#10;        return success(this.$!{serviceName}.save($!entityName));&#10;    }&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param $!entityName 实体对象&#10;     * @return 修改结果&#10;     */&#10;    @PutMapping&#10;    public R update(@RequestBody $!tableInfo.name $!entityName) {&#10;        return success(this.$!{serviceName}.updateById($!entityName));&#10;    }&#10;&#10;    /**&#10;     * 删除数据&#10;     *&#10;     * @param idList 主键结合&#10;     * @return 删除结果&#10;     */&#10;    @DeleteMapping&#10;    public R delete(@RequestParam(&quot;idList&quot;) List&lt;Long&gt; idList) {&#10;        return success(this.$!{serviceName}.removeByIds(idList));&#10;    }&#10;}" />
                    <option name="name" value="controller" />
                  </Template>
                </list>
              </option>
              <option name="name" value="MybatisPlus" />
            </TemplateGroup>
          </value>
        </entry>
        <entry key="springboot+graphqls">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName=$tableInfo.obj.name)&#10;#set($primaryKeyType=&quot;Long&quot;)&#10;#if($tableName.startsWith(&quot;zt_&quot;))&#10;    $!tableInfo.setName($tool.getClassName($tableName.substring(3)))&#10;#end&#10;&#10;&#10;&#10;#set($interfaceName = $tool.append($tableInfo.name, &quot;Dao&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($interfaceName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dao&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dao;&#10;&#10;import $!{tableInfo.savePackageName}.bean.$!{tableInfo.name};&#10;import org.jfantasy.framework.dao.jpa.JpaRepository;&#10;/**&#10; * $!{tableInfo.comment}&#10; *&#10; * @author 黃振泽&#10; * @since $!time.currTime()&#10; */&#10;public interface $!{interfaceName} extends JpaRepository&lt;$!{tableInfo.name}, $primaryKeyType&gt;{&#10;&#10;&#10;&#10;}" />
                    <option name="name" value="dao.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##定义全局变量&#10;#set($tableName=$tableInfo.obj.name)&#10;#set($propertyList=$tool.newHashSet(&quot;creator&quot;,&quot;create_time&quot;,&quot;modifier&quot;,&quot;modify_time&quot;,&quot;deleted&quot;))&#10;#foreach($item in $propertyList)&#10;    #set($newList = $tool.newArrayList())&#10;    #foreach($column in $tableInfo.otherColumn)&#10;        #if($column.obj.name!=$item)&#10;        ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;            $tool.call($newList.add($column))&#10;        #end&#10;    #end&#10;##重新保存&#10;    $tableInfo.setOtherColumn($newList)&#10;#end&#10;&#10;#if ($tableInfo.obj.name.startsWith(&quot;zt_&quot;))&#10;    $!tableInfo.setName($tool.getClassName($tableName.substring(3)))&#10;#end&#10;##使用宏定义设置回调（保存位置与文件后缀）&#10;#save(&quot;/bean&quot;, &quot;.java&quot;)&#10;$!callback.setFileName($tool.append($tableInfo.name, &quot;.java&quot;))&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;bean&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import org.jfantasy.framework.dao.BaseBusEntity;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;import javax.persistence.*;&#10;/**&#10; * @author huangzhenze&#10; * @Date $!time.currTime()&#10; * @Desc 枚举&#10; */&#10; @Data&#10; @Builder&#10; @NoArgsConstructor&#10; @AllArgsConstructor&#10;public class $!{tableInfo.name} extends BaseBusEntity {&#10;&#10;#foreach($column in $tableInfo.pkColumn)&#10;    #if($!{column.comment})/**&#10;    * $!{column.comment}&#10;    */#end&#10;    @Id&#10;    @Column(name =&quot;$!{column.obj.name.toUpperCase()}&quot;)&#10;    @GeneratedValue(generator = &quot;$!{tableInfo.obj.name}&quot;)&#10;    @TableGenerator(name = &quot;$!{tableInfo.obj.name}&quot;, table = &quot;sys_sequence&quot;, pkColumnName = &quot;gen_name&quot;, pkColumnValue = &quot;$!{tableName.substring(3)}:${column.obj.name}&quot;, valueColumnName = &quot;gen_value&quot;)&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;#foreach($column in $tableInfo.otherColumn)&#10;    #if($!{column.comment})/**&#10;    * $!{column.comment}&#10;    */#end&#10;    @Column(name=&quot;$!{column.obj.name.toUpperCase()}&quot; #if($column.shortType==&quot;String&quot;),length=$!{column.obj.dataType.length} #end&#10;    #if($column.obj.dataType==&quot;json&quot;),columnDefinition=&quot;json&quot; #end)&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;}" />
                    <option name="name" value="entity.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName =$tableInfo.obj.name)&#10;#set($tablePrefixName=&quot;zt_&quot;)&#10;#set($fileNameSuffix=&quot;.java&quot;)&#10;#set($primaryKeyType=&quot;Long&quot;)&#10;#if($tableName.startsWith($tablePrefixName))&#10;    $tableInfo.setName($tool.getClassName($tableName.substring(3)))&#10;#end&#10;&#10;&#10;#set ($name=$!tool.firstLowerCase($!{tableInfo.name}))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tool.append(${tableInfo.name},&quot;Service&quot;), ${fileNameSuffix}))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.bean.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import java.util.List;&#10;import org.jfantasy.framework.dao.Pager;&#10;import org.jfantasy.framework.dao.jpa.PropertyFilter;&#10;import $!{tableInfo.savePackageName}.graphql.inputs.${tableInfo.name}Input;&#10;import $!{tableInfo.savePackageName}.graphql.converts.${tableInfo.name}Convert;&#10;/**&#10; * 服务类&#10; *&#10; * @author haungzhenze&#10; * @since $!time.currTime()&#10; */&#10;@Service&#10;@Transactional&#10;public class $!{tableInfo.name}Service{&#10;    @Autowired&#10;    private $!{tableInfo.name}Dao $!{name}Dao;&#10;    @Autowired&#10;    private $!{tableInfo.name}Convert $!{name}Convert;&#10;&#10;    /**&#10;     * 根据主键查询单条数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return $!{tableInfo.name}&#10;     */&#10;    public $!{tableInfo.name}  $!{name}($!{primaryKeyType} $!{pk.name}) {&#10;        return this.$!{name}Dao.findById($!{pk.name}).orElse(null);&#10;    }&#10;    /**&#10;     * 功能：分页查询数据信息&#10;     *&#10;     * @param pager   分页配置信息&#10;     * @param filters 参数过滤条件&#10;     * @return 返回分页结果集&#10;     */&#10;    public Pager&lt;$!{tableInfo.name}&gt; $!{name}s(Pager&lt;$!{tableInfo.name}&gt; pager,List&lt;PropertyFilter&gt; filters){&#10;            return this.$!{name}Dao.findPager(pager,filters);&#10;    }&#10;    /**&#10;     * 功能：保存数据信息&#10;     *&#10;     * @param input 数据对象&#10;     * @return  $!{tableInfo.name}&#10;     */&#10;    public $!{tableInfo.name} create$!{tableInfo.name}($!{tableInfo.name}Input input){&#10;          $!{tableInfo.name} $!{name}=this.$!{name}Convert.to$!{tableInfo.name}(input);&#10;            return this.$!{name}Dao.save($name);&#10;    }&#10;     /**&#10;     * 功能：根据主键修改数据&#10;     *&#10;     * @param ${pk.name}    主键${pk.name}&#10;     * @param input 数据对象&#10;     * @return $!{tableInfo.name}&#10;     */&#10;    public $!{tableInfo.name} update$!{tableInfo.name}($!{primaryKeyType} ${pk.name},Boolean merge,$!{tableInfo.name}Input input){&#10;         $!{tableInfo.name} $!{name}=this.$!{name}Convert.to$!{tableInfo.name}(input);&#10;         $!{name}.set$tool.firstUpperCase($pk.name)($pk.name);&#10;         return this.$!{name}Dao.update($!{name},merge);&#10;    }&#10;    /**&#10;     * 功能：根据主键删除数据&#10;     *&#10;     * @param ${pk.name}  主键${pk.name}&#10;     */&#10;    public Boolean delete$!{tableInfo.name}($!{primaryKeyType} ${pk.name}){&#10;        this.${name}Dao.deleteById(${pk.name});&#10;        return true;&#10;    }&#10;}" />
                    <option name="name" value="service.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始化变量&#10;#set($tableName=$tableInfo.obj.name)&#10;#set($tablePrefixName=&quot;zt_&quot;)&#10;#set($fileNameSuffix=&quot;.java&quot;)&#10;#set($primaryKeyType=&quot;Long&quot;)&#10;#if($tableName.startsWith($tablePrefixName))&#10;    $tableInfo.setName($tool.getClassName($tableName.substring(3)))&#10;#end&#10;#set ($name=$!tool.firstLowerCase($!{tableInfo.name}))&#10;##设置文件名&#10;$!callback.setFileName($tool.append($tool.append(${tableInfo.name},&quot;GraphQLQueryResolver&quot;), ${fileNameSuffix}))&#10;##设置文件储存路径&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/graphql&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}graphql;&#10;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Component;&#10;import com.coxautodev.graphql.tools.GraphQLQueryResolver;&#10;import org.jfantasy.framework.dao.OrderBy;&#10;import org.jfantasy.graphql.util.Kit;&#10;import org.jfantasy.framework.dao.Pager;&#10;import ${tableInfo.savePackageName}.bean.${tableInfo.name};&#10;import ${tableInfo.savePackageName}.service.${tableInfo.name}Service;&#10;import $!{tableInfo.savePackageName}.graphql.filter.${tableInfo.name}Filter;&#10;import $!{tableInfo.savePackageName}.graphql.types.${tableInfo.name}Connection;&#10;@Component&#10;public class ${tableInfo.name}GraphQLQueryResolver implements GraphQLQueryResolver{&#10;    @Autowired&#10;    private ${tableInfo.name}Service ${name}Service;&#10;     /**&#10;     * 功能：分页查询数据信息&#10;     */&#10;    public ${tableInfo.name}Connection ${name}s(${tableInfo.name}Filter filter,int page,int pageSize,OrderBy orderBy){&#10;        Pager&lt;${tableInfo.name}&gt; pager=new Pager&lt;&gt;(page,pageSize,orderBy);&#10;        return Kit.connection(${name}Service.${name}s(pager,filter.builder()),${tableInfo.name}Connection.class);&#10;    }&#10;     /**&#10;     * 根据主键查询单条数据&#10;     */&#10;    public ${tableInfo.name} ${name}($primaryKeyType id){&#10;        return ${name}Service.${name}(id);&#10;    }&#10;}&#10;" />
                    <option name="name" value="graphQLQuery.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始化变量&#10;#set($tableName=$tableInfo.obj.name)&#10;#set($tablePrefixName=&quot;zt_&quot;)&#10;#set($fileNameSuffix=&quot;.java&quot;)&#10;#set($primaryKeyType=&quot;Long&quot;)&#10;#set($len=3)&#10;#if($tableName.startsWith($tablePrefixName))&#10;    $tableInfo.setName($tool.getClassName($tableName.substring($len)))&#10;#end&#10;#set ($name=$!tool.firstLowerCase($!{tableInfo.name}))&#10;##设置文件名&#10;$!callback.setFileName($tool.append($tool.append(${tableInfo.name},&quot;GraphQLMutationResolver&quot;), ${fileNameSuffix}))&#10;##设置文件储存路径&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/graphql&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}graphql;&#10;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Component;&#10;import com.coxautodev.graphql.tools.GraphQLMutationResolver;&#10;import ${tableInfo.savePackageName}.bean.${tableInfo.name};&#10;import ${tableInfo.savePackageName}.service.${tableInfo.name}Service;&#10;import $!{tableInfo.savePackageName}.graphql.inputs.${tableInfo.name}Input;&#10;&#10;@Component&#10;public class ${tableInfo.name}GraphQLMutationResolver implements GraphQLMutationResolver{&#10;    @Autowired&#10;    private ${tableInfo.name}Service ${name}Service;&#10;   /**&#10;     * 功能：新增数据&#10;     */&#10;   public ${tableInfo.name} create${tableInfo.name}(${tableInfo.name}Input input){&#10;       return this.${name}Service.create${tableInfo.name}(input);&#10;   }&#10;    /**&#10;     * 功能：根据主键id修改数据&#10;     */&#10;   public ${tableInfo.name} update${tableInfo.name}(${primaryKeyType} id,Boolean merge,${tableInfo.name}Input input){&#10;       return this.${name}Service.update${tableInfo.name}(id,merge,input);&#10;   }&#10;    /**&#10;     * 功能：根据主键删除数据&#10;     */&#10;   public Boolean delete${tableInfo.name}(${primaryKeyType} id){&#10;        return this.${name}Service.delete${tableInfo.name}(id);&#10;   }&#10;}&#10;" />
                    <option name="name" value="graphQLMutation.java" />
                  </Template>
                  <Template>
                    <option name="code" value="#set($tableName=$tableInfo.obj.name)&#10;#set($tablePrefix=&quot;zt_&quot;)&#10;#set($len=3)&#10;#if($tableName.startsWith($tablePrefix))&#10;    $tableInfo.setName($tool.getClassName($tableName.substring($len)))&#10;#end&#10;#set($propertyList=$tool.newHashSet(&quot;creator&quot;,&quot;create_time&quot;,&quot;modifier&quot;,&quot;modify_time&quot;,&quot;deleted&quot;))&#10;#foreach($item in $propertyList)&#10;    #set($newList = $tool.newArrayList())&#10;    #foreach($column in $tableInfo.otherColumn)&#10;        #if($column.obj.name!=$item)&#10;        ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;            $tool.call($newList.add($column))&#10;        #end&#10;    #end&#10;##重新保存&#10;    $tableInfo.setOtherColumn($newList)&#10;#end&#10;&#10;#foreach($column in $tableInfo.otherColumn)&#10;#if($column.shortName==&quot;Date&quot;)&#10;    $column.setShortName(&quot;String&quot;)&#10;#end&#10;#end&#10;&#10;&#10;##设置文件名&#10;$!callback.setFileName($tool.append($tool.append(${tableInfo.name},&quot;Filter&quot;), &quot;.java&quot;))&#10;##设置文件储存路径&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/graphql/filter&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.graphql.#{end}filter;&#10;import org.jfantasy.framework.dao.jpa.PropertyFilter;&#10;import org.jfantasy.framework.dao.jpa.PropertyFilterBuilder;&#10;import java.util.Date;&#10;import java.util.List;&#10;public class ${tableInfo.name}Filter{&#10;     private PropertyFilterBuilder builder = PropertyFilter.builder();&#10;     &#10;     #foreach($column in $tableInfo.otherColumn)&#10;     public void set$tool.firstUpperCase($column.name)(${column.shortType} ${column.name}){&#10;        builder.equal(&quot;${column.name}&quot;,${column.name});&#10;     }&#10;     #end  &#10;     &#10;     public List&lt;PropertyFilter&gt; builder() {&#10;        return this.builder.build();&#10;    }&#10;}&#10;&#10;&#10;&#10;" />
                    <option name="name" value="filter.java" />
                  </Template>
                  <Template>
                    <option name="code" value="#set($tableName=$tableInfo.obj.name)&#10;#set($tablePrefix=&quot;zt_&quot;)&#10;#set($len=3)&#10;#if($tableName.startsWith($tablePrefix))&#10;    $tableInfo.setName($tool.getClassName($tableName.substring($len)))&#10;#end&#10;#set($propertyList=$tool.newHashSet(&quot;creator&quot;,&quot;create_time&quot;,&quot;modifier&quot;,&quot;modify_time&quot;,&quot;deleted&quot;))&#10;#foreach($item in $propertyList)&#10;    #set($newList = $tool.newArrayList())&#10;    #foreach($column in $tableInfo.otherColumn)&#10;        #if($column.obj.name!=$item)&#10;        ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;            $tool.call($newList.add($column))&#10;        #end&#10;    #end&#10;##重新保存&#10;    $tableInfo.setOtherColumn($newList)&#10;#end&#10;&#10;##设置文件名&#10;$!callback.setFileName($tool.append($tool.append(${tableInfo.name},&quot;Input&quot;), &quot;.java&quot;))&#10;##设置文件储存路径&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/graphql/inputs&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.graphql.#{end}inputs;&#10;import java.util.Date;&#10;import lombok.Data;&#10;@Data&#10;public class ${tableInfo.name}Input{&#10;     &#10;     &#10;     #foreach($column in ${tableInfo.otherColumn})&#10;    #if($!{column.comment})/**&#10;    * $!{column.comment}&#10;    */#end&#10;      private ${column.shortType} ${column.name};&#10;     #end  &#10;      &#10;}&#10;&#10;&#10;&#10;" />
                    <option name="name" value="input.java" />
                  </Template>
                  <Template>
                    <option name="code" value="#set($tableName=$tableInfo.obj.name)&#10;#set($tablePrefix=&quot;zt_&quot;)&#10;#set($len=3)&#10;#if($tableName.startsWith($tablePrefix))&#10;    $tableInfo.setName($tool.getClassName($tableName.substring($len)))&#10;#end&#10;&#10;&#10;##设置文件名&#10;$!callback.setFileName($tool.append($tool.append(${tableInfo.name},&quot;Convert&quot;), &quot;.java&quot;))&#10;##设置文件储存路径&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/graphql/converts&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.graphql.#{end}converts;&#10;&#10;import org.mapstruct.*;&#10;import ${tableInfo.savePackageName}.graphql.inputs.${tableInfo.name}Input;&#10;import ${tableInfo.savePackageName}.bean.${tableInfo.name};&#10;@Mapper(componentModel = &quot;spring&quot;, builder = @Builder, unmappedTargetPolicy = ReportingPolicy.IGNORE, nullValueCheckStrategy = NullValueCheckStrategy.ALWAYS)&#10;public interface ${tableInfo.name}Convert{&#10;     &#10;      ${tableInfo.name} to${tableInfo.name}(${tableInfo.name}Input input);&#10;}&#10;&#10;&#10;&#10;" />
                    <option name="name" value="convert.java" />
                  </Template>
                  <Template>
                    <option name="code" value="#set($tableName=$tableInfo.obj.name)&#10;#set($tablePrefix=&quot;zt_&quot;)&#10;#set($len=3)&#10;#if($tableName.startsWith($tablePrefix))&#10;    $tableInfo.setName($tool.getClassName($tableName.substring($len)))&#10;#end&#10;&#10;&#10;##设置文件名&#10;$!callback.setFileName($tool.append($tool.append(${tableInfo.name},&quot;Connection&quot;), &quot;.java&quot;))&#10;##设置文件储存路径&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/graphql/types&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.graphql.#{end}types;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;import org.jfantasy.graphql.Connection;&#10;import org.jfantasy.graphql.Edge;&#10;import org.jfantasy.graphql.PageInfo;&#10;import org.jfantasy.graphql.Pagination;&#10;import java.util.List;&#10;import ${tableInfo.savePackageName}.bean.${tableInfo.name};&#10;@Data&#10;public class ${tableInfo.name}Connection  implements Connection&lt;${tableInfo.name}Connection.${tableInfo.name}Edge&gt;, Pagination{&#10;    private Integer totalCount;&#10;    private Integer pageSize;&#10;    private Integer totalPage;&#10;    private Integer currentPage;&#10;    private PageInfo pageInfo;&#10;    private List&lt;${tableInfo.name}Connection.${tableInfo.name}Edge&gt; edges;&#10;&#10;&#10;    @Data&#10;    @Builder&#10;    @NoArgsConstructor&#10;    @AllArgsConstructor&#10;    public static class ${tableInfo.name}Edge implements Edge&lt;${tableInfo.name}&gt; {&#10;        private String cursor;&#10;        private ${tableInfo.name} node;&#10;&#10;    }&#10;}&#10;&#10;&#10;&#10;" />
                    <option name="name" value="type.java" />
                  </Template>
                  <Template>
                    <option name="code" value="#set($tableName=$tableInfo.obj.name)&#10;#set($tablePrefix=&quot;zt_&quot;)&#10;#set($len=3)&#10;#if($tableName.startsWith($tablePrefix))&#10;    $tableInfo.setName($tool.getClassName($tableName.substring($len)))&#10;#end&#10;&#10;&#10;##设置文件名&#10;$!callback.setFileName($tool.append($tool.append(${tableInfo.name},&quot;GraphQLResolver&quot;), &quot;.java&quot;))&#10;##设置文件储存路径&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/graphql/resolver&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.graphql.#{end}resolver;&#10;import com.coxautodev.graphql.tools.GraphQLResolver;&#10;import org.springframework.stereotype.Component;&#10;import ${tableInfo.savePackageName}.bean.${tableInfo.name};&#10;@Component&#10;public class ${tableInfo.name}GraphQLResolver implements GraphQLResolver&lt;${tableInfo.name}&gt;{&#10;    &#10;}&#10;&#10;&#10;&#10;" />
                    <option name="name" value="resolver.java" />
                  </Template>
                  <Template>
                    <option name="code" value="#set($tableName=$tableInfo.obj.name)&#10;#set($columns=$tableInfo.otherColumn)&#10;#set($filePath=&quot;E:\whir\java-web\src\main\resources&quot;)&#10;#if($tableName.startsWith(&quot;zt_&quot;))&#10;    $!tableInfo.setName($tool.getClassName($tableName.substring(3)))&#10;#end&#10;&#10;$!callback.setFileName($tool.append($tool.firstLowerCase($tableInfo.name), &quot;.graphqls&quot;))&#10;$!callback.setSavePath($tool.append($filePath))&#10;&#10;&#10;###set($propertyList=$tool.newHashSet(&quot;creator&quot;,&quot;create_time&quot;,&quot;modifier&quot;,&quot;modify_time&quot;,&quot;deleted&quot;))&#10;###foreach($item in $propertyList)&#10;##    #set($newList = $tool.newArrayList())&#10;##    #foreach($column in $tableInfo.otherColumn)&#10;##        #if($column.obj.name!=$item)&#10;##        ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;##            $tool.call($newList.add($column))&#10;##        #end&#10;##    #end&#10;####重新保存&#10;##    $tableInfo.setOtherColumn($newList)&#10;###end&#10;&#10;#foreach($column in $tableInfo.otherColumn)&#10;       #if($column.shortType==&quot;Object&quot;)&#10;           $column.setType(&quot;JSON&quot;)&#10;       #end&#10;    #if($column.shortType==&quot;String&quot;)&#10;        $column.setType(&quot;String&quot;)&#10;    #end&#10;       #if($column.shortType==&quot;Integer&quot;)&#10;           $column.setType(&quot;Int&quot;)&#10;       #end&#10;       &#10;       #if($column.shortType==&quot;Date&quot;)&#10;           $column.setType(&quot;String&quot;)&#10;       #end&#10;       &#10;       #if($column.shortType==&quot;Boolean&quot;)&#10;           $column.setType(&quot;Boolean&quot;)&#10;       #end&#10;       #if($column.shortType==&quot;BigDecimal&quot;)&#10;           $column.setType(&quot;Float&quot;)&#10;       #end&#10;       #if($column.shortType==&quot;Long&quot;)&#10;          $column.setType(&quot;ID&quot;)&#10;       #end&#10;#end&#10;&#10;&#10;extend type Mutation {&#10;    #创建数据&#10;    create${tableInfo.name}(input:${tableInfo.name}CreateInput):${tableInfo.name}&#10;    #根据主键修改数据&#10;    update${tableInfo.name}(id:ID!,merge:Boolean=true,input:${tableInfo.name}UpdateInput):${tableInfo.name}&#10;    #根据主键删除数据&#10;    delete${tableInfo.name}(id:ID!):Boolean&#10;}&#10;extend type Query{&#10;#根据主键查询数据&#10;    ${tableInfo.name}(id:ID!):${tableInfo.name}&#10;#分页查询数据信息&#10;    ${tableInfo.name}s(filter:${tableInfo.name}Filter,page:Int=1,pageSize:Int=15,orderBy:OrderBy):${tableInfo.name}Connection&#10;}&#10;input ${tableInfo.name}CreateInput{&#10;   #foreach($column in $tableInfo.otherColumn)&#10;   ${column.name}:${column.type}&#10;   #end&#10;}&#10;input ${tableInfo.name}UpdateInput{&#10;   #foreach($column in $tableInfo.otherColumn)&#10;   ${column.name}:${column.type} &#10;   #end&#10;}  &#10;&#10;input ${tableInfo.name}Filter{&#10;#foreach($column in $tableInfo.otherColumn)&#10;    ${column.name}:${column.type}&#10;#end&#10;}&#10;#foreach($column in $tableInfo.otherColumn)&#10;    #if($column.shortType==&quot;Date&quot;)&#10;        $column.setType(&quot;Date&quot;)&#10;    #end&#10;#end  &#10;type ${tableInfo.name}{&#10;  #foreach($column in $tableInfo.pkColumn)&#10;    ${column.name}:ID&#10;  #end&#10;  #foreach($column in $tableInfo.otherColumn)&#10;  #if($!{column.comment})&#10;  #$!{column.comment}&#10;  #end&#10;  ${column.name}:${column.type} &#10;  #if($column.shortType==&quot;Date&quot;) @dateFormat #end&#10;  #end&#10;}&#10;&#10;type ${tableInfo.name}Connection{&#10;    #总记录数&#10;    totalCount:Int&#10;    #每页记录数&#10;    pageSize:Int&#10;    #总页数&#10;    totalPage:Int&#10;    #当前页&#10;    currentPage:Int&#10;    pageInfo:PageInfo&#10;    edges:[${tableInfo.name}Edge]&#10;}&#10;type ${tableInfo.name}Edge{&#10;    cursor:String&#10;    node:${tableInfo.name}&#10;}    " />
                    <option name="name" value="item.graphqls" />
                  </Template>
                </list>
              </option>
              <option name="name" value="springboot+graphqls" />
            </TemplateGroup>
          </value>
        </entry>
      </map>
    </option>
    <option name="typeMapperGroupMap">
      <map>
        <entry key="Default">
          <value>
            <TypeMapperGroup>
              <option name="elementList">
                <list>
                  <TypeMapper>
                    <option name="columnType" value="varchar(\(\d+\))?" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="char(\(\d+\))?" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="text" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="decimal(\(\d+\))?" />
                    <option name="javaType" value="java.math.BigDecimal" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="decimal(\(\d+,\d+\))?" />
                    <option name="javaType" value="java.math.BigDecimal" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="integer" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int4" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int8" />
                    <option name="javaType" value="java.lang.Long" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="bigint(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Long" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="datetime" />
                    <option name="javaType" value="java.util.Date" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="timestamp" />
                    <option name="javaType" value="java.util.Date" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="boolean" />
                    <option name="javaType" value="java.lang.Boolean" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="bit(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Boolean" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="json" />
                    <option name="javaType" value="java.lang.Object" />
                  </TypeMapper>
                </list>
              </option>
              <option name="name" value="Default" />
            </TypeMapperGroup>
          </value>
        </entry>
      </map>
    </option>
  </component>
</application>